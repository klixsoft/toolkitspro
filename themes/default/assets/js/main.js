$.fn.isInViewport = function () {
    var elementTop = $(this).offset().top;
    var elementBottom = elementTop + $(this).outerHeight();
    var viewportTop = $(window).scrollTop();
    var viewportBottom = viewportTop + $(window).height();
    return elementBottom > viewportTop && elementTop < viewportBottom;
};

$.fn.hasAttr = function (name) {
    var attr = $(this).attr(name);
    return (typeof attr !== 'undefined' && attr !== false);
};

const fileIcons = {
    pdf: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" version="1.1"><path d="M 85.230 2.115 C 79.963 4.722, 74.702 10.713, 73.161 15.858 C 72.308 18.703, 72 51.077, 72 137.745 L 72 255.759 59.750 256.207 C 49.751 256.573, 46.648 257.065, 42.864 258.884 C 36.162 262.106, 30.861 267.015, 27.468 273.141 L 24.500 278.500 24.227 358.464 C 23.972 432.904, 24.076 438.771, 25.727 443.379 C 27.998 449.721, 34.869 457.364, 41.392 460.805 L 46.500 463.500 179.078 463.500 L 311.657 463.500 316.552 460.474 C 319.585 458.598, 322.598 455.586, 324.474 452.553 L 327.500 447.659 327.785 386.079 C 328.041 330.719, 327.902 324.060, 326.412 320.145 C 324.298 314.591, 319.810 309.482, 314.595 306.691 L 310.500 304.500 180 304 C 55.045 303.521, 49.384 303.421, 46.768 301.647 C 36.858 294.925, 37.588 279.312, 48.061 273.969 C 51.141 272.397, 53.947 272, 61.960 272 L 72 272 72 277.545 C 72 282.100, 72.439 283.530, 74.455 285.545 C 77.563 288.654, 81.111 288.668, 84.694 285.587 L 87.500 283.173 88.013 150.837 C 88.295 78.052, 88.632 18.365, 88.763 18.199 C 88.893 18.033, 90.561 17.246, 92.468 16.449 C 95.442 15.206, 116.456 15, 239.968 15 L 384 15 384.022 52.250 C 384.042 86.250, 384.204 89.849, 385.881 93.500 C 386.891 95.700, 388.651 98.330, 389.793 99.345 C 394.572 103.595, 397.749 103.910, 436.250 103.956 L 473 104 473 296.032 C 473 507.075, 473.407 493.617, 466.958 495.865 C 464.574 496.696, 414.440 497, 279.819 497 C 123.959 497, 95.422 496.785, 92.566 495.592 C 89.703 494.396, 88.952 493.346, 87.577 488.616 C 86.633 485.369, 85.160 482.621, 84.045 482.024 C 78.448 479.028, 72 482.735, 72 488.948 C 72 497.514, 77.466 506.111, 85.334 509.920 L 89.663 512.015 281.245 511.758 L 472.828 511.500 477.136 508.472 C 479.505 506.807, 482.807 503.505, 484.472 501.136 L 487.500 496.828 487.794 293.664 C 488.009 145.031, 487.784 89.426, 486.959 86.500 C 486.015 83.154, 479.427 76.066, 446.665 43.143 C 420.632 16.982, 406.159 3.159, 403.500 1.915 C 399.646 0.112, 393.825 0.043, 244.500 0.023 L 89.500 0.002 85.230 2.115 M 400 53.500 L 400 88 434.745 88 L 469.489 88 435 53.500 C 416.031 34.525, 400.396 19, 400.255 19 C 400.115 19, 400 34.525, 400 53.500 M 260.459 83.826 C 251.813 87.868, 248.442 94.987, 249.291 107.412 C 249.917 116.580, 252.629 125.184, 259.492 139.774 L 264.138 149.652 259.554 162.297 C 253.930 177.811, 246.488 195.393, 240.220 207.971 L 235.500 217.442 227 220.225 C 215.636 223.946, 199.817 231.919, 192.772 237.477 C 179.113 248.251, 177.038 262.705, 187.630 273.297 C 200.959 286.626, 221.096 273.679, 241.547 238.630 L 246.500 230.142 261 226.603 C 276.632 222.787, 294.296 219.573, 305.500 218.506 C 309.350 218.139, 313.213 217.644, 314.085 217.405 C 315.017 217.149, 318.516 219.483, 322.583 223.073 C 347.195 244.800, 366.893 248.445, 377.026 233.147 C 382.048 225.565, 382.250 217.638, 377.575 211.509 C 372.041 204.254, 359.744 201.043, 337.395 201.017 L 322.290 201 317.372 195.750 C 307.323 185.023, 294.818 168.687, 286.406 155.299 L 281.254 147.099 284.105 135.409 C 290.661 108.536, 289.466 91.028, 280.649 84.750 C 276.321 81.669, 266.076 81.200, 260.459 83.826 M 265.667 98.667 C 264.234 100.100, 265.110 110.699, 267.197 117.179 C 268.405 120.931, 269.704 124, 270.083 124 C 270.463 124, 271.039 122.088, 271.364 119.750 C 272.961 108.280, 273.191 104.830, 272.576 101.555 C 272.002 98.491, 271.524 98, 269.121 98 C 267.588 98, 266.033 98.300, 265.667 98.667 M 272.142 173.667 C 270.846 177.425, 266.906 187.210, 263.387 195.411 C 259.868 203.613, 257.139 210.472, 257.321 210.655 C 257.504 210.837, 261.740 210.095, 266.735 209.005 C 271.730 207.915, 281.592 206.084, 288.650 204.937 C 295.708 203.790, 301.604 202.729, 301.753 202.580 C 301.902 202.431, 300.286 200.327, 298.162 197.905 C 294.942 194.232, 285.216 181.511, 276.500 169.573 L 274.500 166.834 272.142 173.667 M 341 217.969 C 344.751 221.033, 356.959 227, 359.479 227 C 361.813 227, 365 224.183, 365 222.120 C 365 220.395, 359.295 218.220, 352.918 217.513 C 349.938 217.183, 345.475 216.691, 343 216.419 L 338.500 215.925 341 217.969 M 214 242.749 C 206.907 246.278, 196 255.334, 196 257.696 C 196 258.291, 196.833 259.807, 197.850 261.063 L 199.700 263.348 203.307 261.119 C 208.559 257.874, 224.746 238.979, 222.248 239.009 C 221.837 239.014, 218.125 240.697, 214 242.749 M 39.213 376.129 C 39.493 434.960, 39.552 436.589, 41.554 439.997 C 44.587 445.160, 49.085 447.749, 56.285 448.477 C 59.703 448.822, 117.476 448.969, 184.670 448.802 L 306.839 448.500 309.420 446.076 L 312 443.651 312 384.280 L 312 324.909 309.545 322.455 L 307.091 320 179.204 320 C 48.281 320, 49.208 320.023, 40.713 316.499 C 39.006 315.791, 38.939 318.482, 39.213 376.129 M 92.315 344.948 C 91.114 345.465, 89.651 346.783, 89.065 347.878 C 88.370 349.177, 88 361.984, 88 384.760 L 88 419.651 90.314 421.826 C 93.389 424.714, 98.039 424.652, 100.826 421.686 C 102.802 419.582, 103 418.307, 103 407.686 L 103 396 111.250 395.978 C 117.099 395.962, 120.683 395.419, 123.565 394.110 C 133.322 389.678, 139.291 380.983, 139.361 371.102 C 139.415 363.538, 137.534 358.539, 132.618 353.179 C 126.227 346.213, 121.773 344.671, 107 344.313 C 100.125 344.146, 93.517 344.432, 92.315 344.948 M 159.500 346.208 C 155.095 348.734, 155.065 348.986, 155.032 384.295 L 155 418.091 157.455 420.545 C 159.810 422.900, 160.438 423, 172.944 423 C 183.391 423, 186.985 422.618, 191.048 421.074 C 205.220 415.689, 213.181 402.332, 213.145 384 C 213.106 364.211, 203.246 349.363, 187.967 346.086 C 181.280 344.652, 162.070 344.734, 159.500 346.208 M 231 347 C 229.075 348.925, 229 350.333, 229 384.427 L 229 419.855 231.635 421.927 C 234.978 424.557, 238.022 424.557, 241.365 421.927 C 243.986 419.866, 244 419.782, 244 405.927 L 244 392 251.851 392 C 260.631 392, 265.562 390.687, 267.021 387.961 C 268.724 384.779, 268.137 380.477, 265.686 378.174 C 263.638 376.251, 262.254 376, 253.686 376 L 244 376 244 368 L 244 360 254.826 360 C 264.849 360, 265.813 359.828, 267.826 357.686 C 270.570 354.765, 270.630 350.054, 267.961 347.189 C 266.023 345.108, 265.107 345, 249.461 345 C 234.333 345, 232.838 345.162, 231 347 M 103 370.601 L 103 381.203 110.224 380.477 C 118.418 379.655, 121.261 378.199, 123.034 373.918 C 124.792 369.675, 123.224 365.068, 119.070 362.268 C 116.449 360.502, 114.299 360, 109.352 360 L 103 360 103 370.601 M 171 384 L 171 407 178.268 407 C 187.066 407, 191.630 404.465, 194.858 397.787 C 199.011 389.193, 198.313 374.986, 193.366 367.436 C 190.666 363.315, 184.974 361, 177.540 361 L 171 361 171 384" stroke="none" fill-rule="evenodd"/></svg>`,
    png: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" version="1.1"><path d="M 109.271 42.095 C 104.443 44.485, 99.498 49.709, 97.125 54.927 C 95.670 58.125, 95.471 67.952, 95.220 148.615 L 94.939 238.731 85.720 239.247 C 72.728 239.975, 66.168 242.657, 58.412 250.412 C 53.997 254.828, 51.731 258.090, 50.162 262.288 C 48.003 268.067, 48 268.209, 48 360.570 C 48 462.599, 47.652 456.902, 54.301 463.838 C 56.060 465.673, 59.300 468.148, 61.500 469.338 L 65.500 471.500 253.459 471.760 C 464.862 472.053, 448.415 472.638, 456.510 464.542 C 464.169 456.883, 464 458.714, 464 383.500 C 464 308.308, 464.167 310.114, 456.526 302.474 C 451.028 296.975, 444.762 295, 432.818 295 L 424 295 424 218.168 L 424 141.335 386.966 91.918 C 366.598 64.738, 349.187 41.937, 348.275 41.250 C 346.971 40.267, 321.756 40, 230.059 40.001 C 113.782 40.002, 113.490 40.007, 109.271 42.095 M 114.923 58.923 L 112 61.846 112 178.423 L 112 295 122.250 294.943 L 132.500 294.886 165.500 256.026 C 186.270 231.568, 199.707 216.561, 201.758 215.532 C 204.527 214.144, 205.425 214.094, 207.739 215.204 C 209.237 215.921, 216.608 223.638, 224.119 232.351 C 231.631 241.064, 238.165 248.044, 238.638 247.863 C 239.112 247.681, 250.525 234.701, 264 219.017 C 287.509 191.653, 288.656 190.487, 292.348 190.184 C 294.996 189.966, 296.832 190.434, 298.235 191.684 C 299.356 192.683, 319.828 216.337, 343.728 244.250 L 387.183 295 397.091 295 L 407 295 407 223.500 L 407 152 381.366 152 C 364.804 152, 354.361 151.589, 351.858 150.839 C 346.843 149.337, 340.518 143.882, 337.716 138.643 C 335.552 134.598, 335.493 133.575, 335.206 95.250 L 334.913 56 226.380 56 L 117.846 56 114.923 58.923 M 352 102.126 L 352 130.651 354.337 132.846 C 356.608 134.981, 357.249 135.034, 377.399 134.771 L 398.124 134.500 376.006 105 C 363.841 88.775, 353.463 75.073, 352.944 74.550 C 352.352 73.954, 352 84.238, 352 102.126 M 177.527 120.179 C 169.515 121.258, 161.576 125.307, 155.442 131.442 C 131.079 155.804, 146.980 197.645, 181.394 199.731 C 198.635 200.775, 212.737 192.212, 220.397 176.047 C 223.205 170.123, 223.496 168.596, 223.461 160 C 223.410 147.674, 220.996 141.269, 213.242 132.894 C 203.530 122.404, 191.857 118.249, 177.527 120.179 M 177.994 136.934 C 165.327 140.787, 158.063 152.757, 160.989 164.955 C 163.581 175.758, 172.614 183, 183.499 183 C 201.417 183, 212.397 165.224, 204.397 149.168 C 201.362 143.080, 196.974 139.398, 190.386 137.416 C 185.280 135.879, 181.896 135.747, 177.994 136.934 M 256.758 253.077 L 221.015 295 293.195 295 L 365.374 295 362.821 292.250 C 361.417 290.738, 345.293 271.950, 326.990 250.500 C 308.687 229.050, 293.440 211.422, 293.106 211.327 C 292.773 211.232, 276.416 230.020, 256.758 253.077 M 181 263.586 C 168.075 278.730, 156.883 291.993, 156.128 293.060 C 154.782 294.963, 155.179 295, 176.873 295 L 198.989 295 212.745 278.885 C 220.310 270.022, 226.613 262.484, 226.750 262.135 C 227.010 261.475, 206.287 236.671, 205.147 236.276 C 204.791 236.153, 193.925 248.443, 181 263.586 M 77.500 257.326 C 71.968 259.491, 70.077 261.012, 67.629 265.268 C 64.354 270.965, 63.653 274.986, 65.031 280.166 C 67.741 290.348, 74.632 294.942, 87.250 294.978 L 95 295 95 275.500 L 95 256 87.750 256.076 C 83.763 256.118, 79.150 256.680, 77.500 257.326 M 64 377.027 C 64 452.291, 64.021 452.643, 68.545 454.379 C 69.435 454.720, 153.847 455, 256.127 455 L 442.091 455 444.545 452.545 L 447 450.091 447 383.500 L 447 316.909 444.545 314.455 L 442.091 312 260.727 312 C 98.131 312, 78.801 311.836, 73.932 310.415 C 70.944 309.543, 67.487 308.183, 66.250 307.392 L 64 305.954 64 377.027 M 129.206 336.016 C 124.308 338.049, 124 340.861, 124 383.500 C 124 415.820, 124.266 423.700, 125.452 426.538 C 127.887 432.366, 134.603 433.489, 138.972 428.799 C 140.819 426.817, 141 425.308, 141 411.884 L 141 397.145 161.750 396.822 L 182.500 396.500 187.754 393.589 C 193.788 390.245, 197.485 385.867, 199.657 379.492 C 201.784 373.250, 201.188 354.924, 198.695 349.892 C 196.350 345.160, 191.585 340.364, 186.553 337.670 C 182.734 335.625, 181.027 335.487, 157 335.282 C 142.564 335.158, 130.505 335.477, 129.206 336.016 M 275.306 337.412 L 272.500 339.824 272.206 368.988 L 271.913 398.151 249.368 368.325 C 236.968 351.921, 225.850 337.953, 224.661 337.285 C 221.331 335.414, 218.379 335.770, 215.306 338.413 L 212.500 340.825 212.248 382.663 C 212.053 414.874, 212.287 425.068, 213.262 426.970 C 216.034 432.374, 222.975 433.386, 226.783 428.942 C 228.291 427.182, 228.561 423.461, 229 398.341 L 229.500 369.744 251.952 399.457 C 264.300 415.799, 275.313 429.806, 276.424 430.585 C 279.568 432.786, 282.886 432.268, 286.077 429.077 L 289 426.154 289 383.500 L 289 340.846 286.077 337.923 C 282.502 334.348, 279.060 334.185, 275.306 337.412 M 337.782 336.489 C 318.127 341.474, 304.243 356.560, 300.843 376.626 C 298.476 390.594, 303.958 407.088, 314.455 417.585 C 324.835 427.965, 341.905 433.673, 355.184 431.203 C 367.845 428.848, 379.027 420.801, 384.417 410.164 C 386.662 405.734, 387 403.807, 387 395.456 C 387 386.168, 386.902 385.748, 384.077 382.923 L 381.154 380 363.500 380 L 345.846 380 342.923 382.923 C 341.161 384.685, 340 386.900, 340 388.500 C 340 390.100, 341.161 392.315, 342.923 394.077 C 345.831 396.985, 345.908 397, 357.923 397 L 370 397 370 399.820 C 370 403.930, 364.143 410.262, 357.830 412.978 C 344.268 418.812, 326.461 410.950, 319.652 396.122 C 316.351 388.932, 316.629 377.273, 320.280 369.839 C 325.769 358.662, 335.575 352.542, 348 352.541 C 356.681 352.540, 359.989 353.933, 367.207 360.632 C 372.465 365.511, 375.362 366.076, 379.288 362.988 C 385.290 358.267, 383.125 351.179, 373.449 343.874 C 363.299 336.210, 349.856 333.427, 337.782 336.489 M 141 366 L 141 380 160.045 380 C 178.933 380, 179.111 379.980, 181.545 377.545 C 183.792 375.299, 184 374.319, 184 366 C 184 357.681, 183.792 356.701, 181.545 354.455 C 179.111 352.020, 178.933 352, 160.045 352 L 141 352 141 366" stroke="none" fill-rule="evenodd"/></svg>`,
    jpg: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" version="1.1"><path d="M 69.900 1.991 C 67.921 3.037, 64.902 5.486, 63.193 7.433 C 56.553 14.995, 57 -3.174, 57 259.231 C 57 464.986, 57.196 497.478, 58.449 499.901 C 59.246 501.442, 61.513 504.121, 63.486 505.854 C 71.034 512.481, 55.968 512, 256 512 C 457.002 512, 441.607 512.506, 448.835 505.659 C 455.511 499.336, 455.001 515.721, 454.994 307.800 C 454.991 175.690, 454.663 117.292, 453.911 114.500 C 452.991 111.083, 445.006 102.645, 399.167 56.647 C 368.425 25.799, 344.125 2.198, 342.282 1.397 C 339.578 0.223, 317.846 0.007, 206.282 0.044 C 77.741 0.087, 73.385 0.149, 69.900 1.991 M 76.872 19.654 C 75.725 21.036, 75.457 46.829, 75.235 177.221 C 74.978 328.118, 75.028 333.093, 76.798 331.817 C 77.804 331.093, 108.202 305.300, 144.350 274.500 C 180.497 243.700, 211.360 217.877, 212.935 217.116 C 218.274 214.536, 220.417 216.065, 243.092 238.633 L 264.683 260.124 306.858 213.812 C 330.054 188.340, 350.442 166.488, 352.165 165.250 C 353.887 164.013, 356.578 163, 358.145 163 C 361.336 163, 359.245 161.139, 406.180 205.750 C 422.527 221.288, 436.149 234, 436.451 234 C 436.753 234, 437 209.250, 437 179 L 437 124 384 124 L 331 124 331 71 L 331 18 204.622 18 C 88.292 18, 78.136 18.131, 76.872 19.654 M 349 69.500 L 349 106 385.745 106 L 422.490 106 386 69.500 C 365.931 49.425, 349.395 33, 349.255 33 C 349.115 33, 349 49.425, 349 69.500 M 155.500 111.867 C 133.865 118.083, 119 137.483, 119 159.500 C 119 177.086, 129.422 194.632, 144.684 202.742 C 174.015 218.326, 208.288 202.721, 216.597 170 C 219.570 158.292, 216.953 144.083, 209.750 132.823 C 198.394 115.071, 175.340 106.165, 155.500 111.867 M 162 129.440 C 155.064 130.911, 151.512 132.807, 146.613 137.654 C 134.585 149.554, 134.585 169.441, 146.613 181.348 C 151.449 186.136, 156.105 188.565, 162.762 189.775 C 176.725 192.313, 190.028 185.431, 196.155 172.500 C 206.992 149.631, 186.804 124.180, 162 129.440 M 328.425 217.697 C 312.516 235.130, 294.597 254.730, 288.603 261.252 L 277.707 273.110 299.853 295.397 C 321.349 317.030, 322 317.803, 322 321.706 C 322 327.077, 318.259 331, 313.138 331 C 309.738 331, 307.090 328.542, 262.806 284.296 L 216.063 237.592 213.782 239.646 C 212.527 240.775, 185.625 263.651, 154 290.480 C 122.375 317.310, 95.385 340.328, 94.023 341.631 L 91.545 344 264.273 344 L 437 344 437 302.154 L 437 260.309 397.854 223.154 C 376.323 202.719, 358.402 186, 358.029 186 C 357.655 186, 344.333 200.264, 328.425 217.697 M 75.229 427.037 C 75.464 483.559, 75.696 492.198, 77 493.021 C 77.931 493.609, 145.889 493.969, 256 493.969 C 366.111 493.969, 434.069 493.609, 435 493.021 C 436.304 492.198, 436.536 483.559, 436.771 427.037 L 437.043 362 256 362 L 74.957 362 75.229 427.037 M 170 421.944 L 170 457.888 167.621 460.655 C 164.140 464.702, 154.345 465.170, 144.219 461.774 L 136.985 459.348 133.861 464.217 C 130.845 468.916, 130.802 469.137, 132.618 470.530 C 133.653 471.324, 138.100 473.158, 142.500 474.604 C 153.308 478.157, 165.152 478.322, 172.757 475.026 C 178.905 472.362, 183.465 467.590, 184.940 462.277 C 185.583 459.963, 185.991 444.460, 185.994 422.250 L 186 386 178 386 L 170 386 170 421.944 M 305.606 387.523 C 293.117 390.951, 283.846 401.591, 279.938 416.978 C 278.300 423.424, 278.588 441.387, 280.439 448.280 C 283.514 459.735, 290.714 469.507, 299.196 473.738 C 312.255 480.253, 332.747 477.664, 342.774 468.232 L 346.048 465.153 345.774 447.826 L 345.500 430.500 330.500 430.500 L 315.500 430.500 315.198 435.750 L 314.895 441 322.448 441 L 330 441 330 451.965 C 330 464.847, 329.886 464.989, 318.869 465.777 C 313.419 466.167, 311.351 465.862, 307.831 464.149 C 291.001 455.958, 288.866 414.357, 304.658 402.312 C 307.905 399.835, 309.197 399.500, 315.495 399.500 C 321.678 399.500, 323.227 399.885, 326.941 402.342 L 331.236 405.185 335.849 400.842 C 338.387 398.454, 340.647 396.399, 340.873 396.275 C 341.099 396.151, 340.207 395.130, 338.892 394.005 C 330.514 386.840, 317.397 384.285, 305.606 387.523 M 207 432 L 207 477 214.500 477 L 222 477 222 461 L 222 445 229.979 445 C 246.226 445, 257.401 438.562, 261.865 426.631 C 268.653 408.489, 258.544 391.790, 238.535 388.091 C 235.289 387.491, 226.865 387, 219.816 387 L 207 387 207 432 M 222 416.641 L 222 434.282 230.365 433.760 C 234.966 433.473, 240.029 432.622, 241.615 431.869 C 248.309 428.692, 251.468 413.560, 246.976 406.192 C 244.087 401.453, 238.142 399.049, 229.250 399.022 L 222 399 222 416.641" stroke="none" fill-rule="evenodd"/></svg>`,
    jpeg: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" version="1.1"><path d="M 69.900 1.991 C 67.921 3.037, 64.902 5.486, 63.193 7.433 C 56.553 14.995, 57 -3.174, 57 259.231 C 57 464.986, 57.196 497.478, 58.449 499.901 C 59.246 501.442, 61.513 504.121, 63.486 505.854 C 71.034 512.481, 55.968 512, 256 512 C 457.002 512, 441.607 512.506, 448.835 505.659 C 455.511 499.336, 455.001 515.721, 454.994 307.800 C 454.991 175.690, 454.663 117.292, 453.911 114.500 C 452.991 111.083, 445.006 102.645, 399.167 56.647 C 368.425 25.799, 344.125 2.198, 342.282 1.397 C 339.578 0.223, 317.846 0.007, 206.282 0.044 C 77.741 0.087, 73.385 0.149, 69.900 1.991 M 76.872 19.654 C 75.725 21.036, 75.457 46.829, 75.235 177.221 C 74.978 328.118, 75.028 333.093, 76.798 331.817 C 77.804 331.093, 108.202 305.300, 144.350 274.500 C 180.497 243.700, 211.360 217.877, 212.935 217.116 C 218.274 214.536, 220.417 216.065, 243.092 238.633 L 264.683 260.124 306.858 213.812 C 330.054 188.340, 350.442 166.488, 352.165 165.250 C 353.887 164.013, 356.578 163, 358.145 163 C 361.336 163, 359.245 161.139, 406.180 205.750 C 422.527 221.288, 436.149 234, 436.451 234 C 436.753 234, 437 209.250, 437 179 L 437 124 384 124 L 331 124 331 71 L 331 18 204.622 18 C 88.292 18, 78.136 18.131, 76.872 19.654 M 349 69.500 L 349 106 385.745 106 L 422.490 106 386 69.500 C 365.931 49.425, 349.395 33, 349.255 33 C 349.115 33, 349 49.425, 349 69.500 M 155.500 111.867 C 133.865 118.083, 119 137.483, 119 159.500 C 119 177.086, 129.422 194.632, 144.684 202.742 C 174.015 218.326, 208.288 202.721, 216.597 170 C 219.570 158.292, 216.953 144.083, 209.750 132.823 C 198.394 115.071, 175.340 106.165, 155.500 111.867 M 162 129.440 C 155.064 130.911, 151.512 132.807, 146.613 137.654 C 134.585 149.554, 134.585 169.441, 146.613 181.348 C 151.449 186.136, 156.105 188.565, 162.762 189.775 C 176.725 192.313, 190.028 185.431, 196.155 172.500 C 206.992 149.631, 186.804 124.180, 162 129.440 M 328.425 217.697 C 312.516 235.130, 294.597 254.730, 288.603 261.252 L 277.707 273.110 299.853 295.397 C 321.349 317.030, 322 317.803, 322 321.706 C 322 327.077, 318.259 331, 313.138 331 C 309.738 331, 307.090 328.542, 262.806 284.296 L 216.063 237.592 213.782 239.646 C 212.527 240.775, 185.625 263.651, 154 290.480 C 122.375 317.310, 95.385 340.328, 94.023 341.631 L 91.545 344 264.273 344 L 437 344 437 302.154 L 437 260.309 397.854 223.154 C 376.323 202.719, 358.402 186, 358.029 186 C 357.655 186, 344.333 200.264, 328.425 217.697 M 75.229 427.037 C 75.464 483.559, 75.696 492.198, 77 493.021 C 77.931 493.609, 145.889 493.969, 256 493.969 C 366.111 493.969, 434.069 493.609, 435 493.021 C 436.304 492.198, 436.536 483.559, 436.771 427.037 L 437.043 362 256 362 L 74.957 362 75.229 427.037 M 170 421.944 L 170 457.888 167.621 460.655 C 164.140 464.702, 154.345 465.170, 144.219 461.774 L 136.985 459.348 133.861 464.217 C 130.845 468.916, 130.802 469.137, 132.618 470.530 C 133.653 471.324, 138.100 473.158, 142.500 474.604 C 153.308 478.157, 165.152 478.322, 172.757 475.026 C 178.905 472.362, 183.465 467.590, 184.940 462.277 C 185.583 459.963, 185.991 444.460, 185.994 422.250 L 186 386 178 386 L 170 386 170 421.944 M 305.606 387.523 C 293.117 390.951, 283.846 401.591, 279.938 416.978 C 278.300 423.424, 278.588 441.387, 280.439 448.280 C 283.514 459.735, 290.714 469.507, 299.196 473.738 C 312.255 480.253, 332.747 477.664, 342.774 468.232 L 346.048 465.153 345.774 447.826 L 345.500 430.500 330.500 430.500 L 315.500 430.500 315.198 435.750 L 314.895 441 322.448 441 L 330 441 330 451.965 C 330 464.847, 329.886 464.989, 318.869 465.777 C 313.419 466.167, 311.351 465.862, 307.831 464.149 C 291.001 455.958, 288.866 414.357, 304.658 402.312 C 307.905 399.835, 309.197 399.500, 315.495 399.500 C 321.678 399.500, 323.227 399.885, 326.941 402.342 L 331.236 405.185 335.849 400.842 C 338.387 398.454, 340.647 396.399, 340.873 396.275 C 341.099 396.151, 340.207 395.130, 338.892 394.005 C 330.514 386.840, 317.397 384.285, 305.606 387.523 M 207 432 L 207 477 214.500 477 L 222 477 222 461 L 222 445 229.979 445 C 246.226 445, 257.401 438.562, 261.865 426.631 C 268.653 408.489, 258.544 391.790, 238.535 388.091 C 235.289 387.491, 226.865 387, 219.816 387 L 207 387 207 432 M 222 416.641 L 222 434.282 230.365 433.760 C 234.966 433.473, 240.029 432.622, 241.615 431.869 C 248.309 428.692, 251.468 413.560, 246.976 406.192 C 244.087 401.453, 238.142 399.049, 229.250 399.022 L 222 399 222 416.641" stroke="none" fill-rule="evenodd"/></svg>`,
    image: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" version="1.1"><path d="M 49.512 1.614 C 31.549 5.957, 14.970 19.414, 6.538 36.496 C -0.500 50.755, -0.052 34.971, 0.238 258.707 L 0.500 460.500 2.818 467 C 9.879 486.804, 25.196 502.121, 45 509.182 L 51.500 511.500 253.293 511.762 C 477.029 512.052, 461.245 512.500, 475.504 505.462 C 492.255 497.194, 506.258 480.163, 510.008 463.500 C 510.626 460.750, 511.553 457.719, 512.066 456.764 C 513.224 454.611, 513.351 53.665, 512.194 54.380 C 511.750 54.654, 510.863 52.377, 510.222 49.320 C 506.661 32.347, 492.538 14.944, 475.504 6.540 C 461.373 -0.432, 476.880 0.022, 255.500 0.098 C 84.537 0.157, 54.631 0.377, 49.512 1.614 M 56 31.930 C 46.980 34.702, 38.852 41.545, 34.284 50.216 L 31.500 55.500 31.235 168.500 C 31.089 230.650, 31.089 296.990, 31.235 315.921 L 31.500 350.342 66 320.953 C 84.975 304.788, 103.934 288.788, 108.132 285.398 C 122.851 273.506, 137.957 271.230, 153.356 278.582 C 156.228 279.953, 170.429 290.947, 185.500 303.465 L 212.500 325.892 284 254.623 C 350.930 187.908, 355.907 183.175, 361.876 180.564 C 375.976 174.396, 390.354 175.643, 402.648 184.102 C 405.463 186.038, 418.477 201.236, 439.214 226.804 C 456.922 248.637, 473.576 269.120, 476.222 272.322 L 481.034 278.145 480.767 166.822 L 480.500 55.500 477.716 50.216 C 474.173 43.492, 468.508 37.827, 461.784 34.284 L 456.500 31.500 257.500 31.331 C 148.050 31.238, 57.375 31.508, 56 31.930 M 0.490 256 C 0.490 366.825, 0.607 412.163, 0.750 356.750 C 0.893 301.338, 0.893 210.663, 0.750 155.250 C 0.607 99.838, 0.490 145.175, 0.490 256 M 143 65.045 C 123.082 70.185, 106.197 83.605, 96.652 101.884 C 73.602 146.025, 100.039 199.062, 149.360 207.625 C 179.690 212.891, 211.062 197.399, 225.376 170.086 C 232.074 157.307, 233.507 151.155, 233.437 135.500 C 233.381 123.112, 233.067 120.579, 230.712 113.500 C 226.826 101.817, 221.621 93.593, 212.016 83.959 C 204.910 76.832, 201.927 74.652, 194 70.785 C 188.775 68.237, 181.261 65.443, 177.303 64.576 C 167.439 62.416, 152.391 62.622, 143 65.045 M 146.665 96.447 C 139.269 99.488, 133.743 103.314, 129.372 108.421 C 121.520 117.594, 117.719 131.009, 119.800 142.201 C 126.136 176.269, 166.366 189.353, 190.667 165.247 C 199.117 156.865, 202.971 147.540, 202.989 135.428 C 203.016 117.579, 191.581 101.877, 174.200 95.897 C 166.084 93.104, 154.217 93.341, 146.665 96.447 M 375.500 208.466 C 373.850 209.202, 338.975 243.403, 298 284.467 C 257.025 325.531, 222.178 359.830, 220.562 360.687 C 217.295 362.420, 210.030 362.622, 207.112 361.060 C 206.070 360.502, 191.107 348.307, 173.859 333.959 C 156.612 319.610, 141.230 307.196, 139.677 306.372 C 137.970 305.465, 135.741 305.118, 134.038 305.492 C 132.312 305.871, 111.818 322.615, 81.062 348.776 L 30.901 391.441 31.200 423.971 L 31.500 456.500 34.284 461.784 C 37.827 468.508, 43.492 474.173, 50.216 477.716 L 55.500 480.500 256 480.500 L 456.500 480.500 461.784 477.716 C 468.508 474.173, 474.173 468.508, 477.716 461.784 L 480.500 456.500 480.778 391.946 L 481.056 327.392 434.459 269.946 C 408.831 238.351, 386.881 211.541, 385.681 210.370 C 382.761 207.517, 379.142 206.840, 375.500 208.466" stroke="none" fill-rule="evenodd"/></svg>`,
    file: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" version="1.1"><path d="M 81.798 1.931 C 66.485 6.827, 54.543 18.849, 49.943 34 C 48.001 40.397, 47.974 43.946, 48.235 258 L 48.500 475.500 50.819 481.243 C 55.695 493.317, 66.696 504.305, 78.808 509.200 L 84.500 511.500 256 511.500 L 427.500 511.500 433.243 509.181 C 445.317 504.305, 456.305 493.304, 461.200 481.192 L 463.500 475.500 463.787 293 C 463.945 192.625, 463.799 108.925, 463.462 107 C 462.940 104.018, 455.431 96.067, 412.709 53.262 C 385.132 25.631, 361.135 2.343, 359.383 1.512 C 356.588 0.185, 339.733 0.007, 221.849 0.054 C 94.678 0.105, 87.195 0.205, 81.798 1.931 M 92.115 33.004 C 87.533 34.085, 82.078 39.746, 80.956 44.585 C 79.748 49.791, 79.748 462.209, 80.956 467.415 C 82.133 472.489, 87.511 477.867, 92.585 479.044 C 97.776 480.248, 414.224 480.248, 419.415 479.044 C 424.489 477.867, 429.867 472.489, 431.044 467.415 C 431.569 465.154, 431.962 392.650, 431.976 295.796 L 432 128.092 395.250 127.796 L 358.500 127.500 353.500 124.836 C 347.507 121.644, 342.066 116.131, 338.856 110 C 336.524 105.545, 336.497 105.133, 336.204 68.750 L 335.908 32 215.704 32.102 C 149.592 32.159, 93.977 32.564, 92.115 33.004 M 112 240 L 112 256 256 256 L 400 256 400 240 L 400 224 256 224 L 112 224 112 240 M 112 320 L 112 336 256 336 L 400 336 400 320 L 400 304 256 304 L 112 304 112 320 M 112 400 L 112 416 224 416 L 336 416 336 400 L 336 384 224 384 L 112 384 112 400 M 368 400 L 368 416 384 416 L 400 416 400 400 L 400 384 384 384 L 368 384 368 400" stroke="none" fill-rule="evenodd"/></svg>`
};

window.isValidURL = urlString => {
    var urlPattern = new RegExp('^(https?:\\/\\/)?' + // validate protocol
        '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // validate domain name
        '((\\d{1,3}\\.){3}\\d{1,3}))' + // validate OR ip (v4) address
        '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // validate port and path
        '(\\?[;&a-z\\d%_.~+=-]*)?' + // validate query string
        '(\\#[-a-z\\d_]*)?$', 'i'); // validate fragment locator
    return !!urlPattern.test(urlString);
};

window.wordCount = (content) => {
    content = content.replace(/\s+/g, " ");
    content = content.replace(/\n /, " ");
    return content.split(' ').length;
}

window.formatNumber = function (x){
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

window.formatBytes = (bytes, decimals = 2) => {
    if (!+bytes) return '0 Bytes'

    const k = 1024
    const dm = decimals < 0 ? 0 : decimals
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']

    const i = Math.floor(Math.log(bytes) / Math.log(k))

    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`
};

window.show_loadingModal = function (message = "Please Wait . . .") {
    const modal = jQuery(document).find("#loadingModal");
    if (modal) {
        modal.find(".message").html(message);
        $('body').append('<div class="modal-backdrop fade show" id="loadingModal_backdrop"></div>');
        modal.addClass("show");
        modal.attr("aria-modal", true);
        modal.show();
    }
};

window.hide_loadingModal = function () {
    const modal = jQuery(document).find("#loadingModal")
    if (modal) {
        modal.removeClass("show");
        modal.attr("aria-modal", false);
        modal.hide();
        const backdrop = $(document).find("#loadingModal_backdrop");
        if (backdrop.length > 0) {
            backdrop.remove();
        }
    }
};

window.bs_alert = function (message, alertType) {
    return `
        <div class="alert alert-${alertType}" role="alert">
        ${message}
        </div>
    `;
};

window.getFileTemplate = (file) => {
    const fileName = file.name;
    const fileExtension = fileName.substring(fileName.lastIndexOf('.') + 1);
    let imageIcon = fileIcons.file;
    if (fileIcons.hasOwnProperty(fileExtension))
        imageIcon = fileIcons[fileExtension];

    return `<div class="drop-file-preview__item">
        ${imageIcon}
        <div class="drop-file-preview__item__info">
            <div class="m-0 fw-bold filename">${fileName}</div>
            <div class="m-0">${formatBytes(file.size)}</div>
        </div>
    </div>`;
};

window.alertModal = (message, buttons=[{text : "OK", type : "close"}], title="Alert") => {
    const alert = $(document).find("#alertModal");
    alert.find(".modal-title").text(title);
    alert.find(".modal-body").html(message);

    let footerButtons = '';
    buttons.map((button) => {
        if( button?.type == 'close' ){
            footerButtons += `<button type="button" class="btn btn-primary" data-bs-dismiss="modal">${button?.text || "OK"}</button>`;
        }else if( button?.type == 'link' ){
            if( button?.link ){
                footerButtons += `<a href="${button?.link}" ${button?.atts} type="button" class="btn btn-primary">${button?.text || "OK"}</a>`;
            }
        }else if( button?.type == 'button' ){
            if( button?.id ){
                footerButtons += `<a href="${button?.id}" ${button?.atts} type="button" class="btn btn-primary ${button?.class}">${button?.text || "OK"}</a>`;
            }
        }
    });

    alert.find(".modal-footer").html(footerButtons);
    alert.modal("show");
};

window.purchaseSubscriptionModal = (message) => {
    alertModal(message, [
        {
            type : "close",
            text : "Not Now"
        },
        {
            type : "link",
            link : allsmarttools.siteurl + "pricing/",
            text : "Purchase Subscription",
            atts : 'target="_blank"'
        }
    ], "Purchase Subscription");
}

window.alertMessage = (type, message, title = "Alert", timeout = 4000) => {
    init({
        fade_in: 500,
        fade_out: 500,
        position: 'top-right'
    });

    toast({
        title: title,
        description: message,
        type: type,
        timeout: timeout,
        title: title
    });
};

const unsecuredCopyToClipboard = (text) => {
    const textArea = document.createElement("textarea");
    textArea.value = text;
    document.body.appendChild(textArea);
    textArea.select();
    try {
        document.execCommand('copy')
    } catch (err) {
        console.error('Unable to copy to clipboard', err)
    }

    document.body.removeChild(textArea)
};

window.copy_text = function(content) {
    if (window.isSecureContext && navigator.clipboard) {
        navigator.clipboard.writeText(content);
    } else {
        unsecuredCopyToClipboard(content);
    }
};

window.saveAs = function(uri, filename) {
    var link = document.createElement('a');
    if (typeof link.download === 'string') {
        link.href = uri;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    } else {
        window.open(uri);
    }
};

window.download_text = function(content, filename, type = "text/plain") {
    var textFileAsBlob = new Blob([content], { type: type });
    var downloadLink = document.createElement("a");
    downloadLink.download = filename;
    downloadLink.innerHTML = "My Link";
    window.URL = window.URL || window.webkitURL;
    downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
    downloadLink.onclick = destroyClickedElement;
    downloadLink.style.display = "none";
    document.body.appendChild(downloadLink);
    downloadLink.click();
};

function destroyClickedElement(event) {
    document.body.removeChild(event.target);
}

window.addInlineMessage = (message, type) => {
    const hasmessage = $(document).find(".has_messages");
    if( hasmessage.length > 0 ){
        hasmessage.html(bs_alert(message, type));
    }
}

function remove_disabled_from_form(){
    const form = document.getElementById('tool_content_container');
    if( form ){
        const fields = form.querySelectorAll('input, select, textarea, button');
        for (var i = 0; i < fields.length; i++) {
            fields[i].removeAttribute('disabled');
        }
    }
}

window.recaptcha_loaded = function(){
    remove_disabled_from_form();
};

document.addEventListener('DOMContentLoaded', function() {
    if( ! allsmarttools.captcha.enable ){
        remove_disabled_from_form();
    }
});

window.onload = function(){
    remove_disabled_from_form();
}

window.recaptcha_v2i_error = () => {
    window.hasRecaptchaError = true;
    addInlineMessage("Unable to load recaptcha. Please refresh the page and try again!!!", "warning text-center py-3");
}

window.recaptcha_v2i_validation = (token) => {
    const form = $(document).find("form");
    if( form.length > 1 ){
        form.eq(1).submit();
        grecaptcha.reset();
    }
}

window.scrollToDiv = function(ele){
    $('html,body').animate({
        scrollTop: ele.offset().top - 100
    });
}

window.validateCaptcha = () => {
    if (
        allsmarttools?.captcha?.site_key
        && allsmarttools?.captcha?.site_key.length > 0
    ) {
        if (allsmarttools?.captcha?.service == 'v2') {
            if (typeof grecaptcha == 'object') {
                const response = grecaptcha.getResponse();
                if (response.length > 0) {
                    grecaptcha?.reset();
                    return {
                        isv3: false,
                        valid: true
                    };
                } else {
                    return {
                        isv3: false,
                        valid: false
                    };
                }
            }
        } else if (allsmarttools?.captcha?.service == 'v3') {
            return {
                isv3: true,
                valid: true
            };
        }
    }

    return {
        isv3: false,
        valid: true
    };
};

const Cookie = {
    set: function (name, value, days, path) {
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            var expires = "; expires=" + date.toGMTString();
        } else var expires = "";

        var dir = path || '/';
        document.cookie = name + "=" + value + expires + "; path=" + dir;
    },
    get: function (name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
        }
        return null;
    },
    delete: function (name) {
        this.set(name, "", -1);
    }
};

window.addHeadCss = function(url){
    let scriptTag = `<link rel="stylesheet" href="${url}">`;
    $('head').append(scriptTag);
};

window.addBodyJs = function(url){
    let scriptTag = `<script src="${url}"></script>`;
    $('body').append(scriptTag);
};


window.openNewTab = function(content, type='plain/txt') {
    var blob = new Blob([content], { type: type });
    var url = URL.createObjectURL(blob);
    window.open(url, '_blank');
}

window.reloadv3_captcha = function(){
    if( typeof recaptchav3_onload_success == "function" ){
        recaptchav3_onload_success();
    }
}


$(document).ready(function () {

    /** Remove d-none from mobile menu */
    $(document).find(".tkp__menu").removeClass("d-none");
    $(document).find(".tkp__menu-backdrop").removeClass("d-none");
    $(document).find(".navbar-search-container").removeClass("d-none");

    /** INCLUDE EXTRA SCRIPTS */
    allsmarttools.scripts.css.map((cssurl) => {
        addHeadCss(cssurl);
    });

    allsmarttools.scripts.js.map((jsurl) => {
        addBodyJs(jsurl);
    });
    /** END INCLUDE EXTRA SCRIPTS */

    window.onload = function () {
        const contactform = $(document).find(".contact_form");
        if (contactform.length > 0) {
            contactform.find("input,textarea").attr("disabled", false);
            contactform.find("[type=submit]").attr("disabled", false);
        }
    };

    $(document.body).on("clear_message", function (e, data) {
        const errorcontainer = $(document).find(".has_messages");
        if (errorcontainer.length > 0) {
            errorcontainer.html('');
        }
    });

    $(document.body).on("has_message", function (e, data) {
        const errorType = data?.type == 'danger' ? "error" : data?.type;
        if (data?.messages) {
            data?.messages?.map((message) => {
                alertMessage(errorType, message, "Alert");
            });
        }
    });

    $(document).on("click", ".btn-toggle-theme", function (e) {
        e.preventDefault();
        const theme = Cookie.get("is_dark_theme");
        if (theme == 'dark') {
            Cookie.delete("is_dark_theme");
        } else {
            Cookie.set("is_dark_theme", "dark", 10);
        }

        window.location.href = window.location.href;
    });


    $(document).on('click', '.shareBtn', function () {
        const modal = $(document).find('#shareModal');
        modal.modal('show');

        try {
            let url = $(this).attr('data-url');

            modal.find('input').val(url);
            url = encodeURIComponent(url);

            const title = $(this).attr('data-title') || "";
            const image = $(this).attr('data-image') || "";

            const facebook = `https://www.facebook.com/sharer/sharer.php?u=${url}`;
            modal.find('.facebook').attr('href', facebook);

            const messenger = `https://www.facebook.com/dialog/send?link=${url}&app_id=1877420659114927&redirect_uri=${url}`;
            modal.find('.messenger').attr('href', messenger);

            const twitter = `https://twitter.com/intent/tweet?url=${url}&text=${title}`;
            modal.find('.twitter').attr('href', twitter);

            const whatsapp = `https://api.whatsapp.com/send?text=${url}`;
            modal.find('.whatsapp').attr('href', whatsapp);

            const email = `mailto:?&subject=&body=${title}%0D%0A%0D%0A${url}%0D%0A`;
            modal.find('.email').attr('href', email);

            const pinterest = `https://pinterest.com/pin/create/button/?url=${url}&media=${image}&description=${title}`;
            modal.find('.pinterest').attr('href', pinterest);

            $(document).find('.copyURLBtn').html("Copy").attr('disabled', false);
        } catch (e) {

        }
    });

    $(document).on('click', '.facebook', function (e) {
        e.preventDefault();
        url = $(this).attr("href");
        options = 'display=popup&toolbar=0,status=0,resizable=1,width=626,height=436';
        window.open(url, 'sharer', options);
    });

    $(document).on('click', '.copyURLBtn', function () {
        const copyText = document.getElementById("copyURL");
        copyText.select();
        copyText.setSelectionRange(0, 99999);
        navigator.clipboard.writeText(copyText.value);
        $(this).html("Copied");
    });

    window.validURL = (str) => {
        var pattern = new RegExp('^(https?:\\/\\/)?' + // protocol
            '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // domain name
            '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
            '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
            '(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
            '(\\#[-a-z\\d_]*)?$', 'i'); // fragment locator
        return !!pattern.test(str);
    };

    window.getURLContent = (url, type, callbackFnc, errorFnc) => {
        if (validURL(url)) {
            $.ajax({
                type: "POST",
                url: allsmarttools.ajaxurl,
                data: {
                    url: url,
                    action: "get_content_from_url"
                },
                success: function (response) {
                    if (response?.type?.includes(type)) {
                        callbackFnc(response?.content);
                    } else {
                        $(document.body).trigger("has_message", {
                            type: "danger",
                            messages: [
                                "Invalid Response from URL!!!"
                            ]
                        });
                        errorFnc(response);
                    }
                },
                error: function (e) {
                    $(document.body).trigger("has_message", {
                        type: "danger",
                        messages: [
                            "Invalid Response from URL!!!"
                        ]
                    });
                    errorFnc(e);
                }
            });
        }
    }

    $(document).on("submit", ".on_submit_update_profile", function (e) {
        e.preventDefault();

        const form = $(this);
        const btn = $(document).find(".updateprofile");
        const prevhtml = btn.html();

        $.ajax({
            type: "POST",
            url: allsmarttools.ajaxurl,
            data: form.serializeArray(),
            dataType: "json",
            beforeSend: function () {
                btn.attr("disabled", true).html("<i class='las la-spinner la-spin'></i> Updating . . .");
                $(document.body).trigger("clear_message");
            },
            error: function (error) {
                $(document.body).trigger("has_message", {
                    type: "danger",
                    messages: [
                        "Unable to update profile. Please try again!!!"
                    ]
                });
            },
            success: function (response) {
                $(document.body).trigger("has_message", {
                    type: response.success ? "success" : "danger",
                    messages: [
                        response?.message
                    ]
                });
            },
            complete: function () {
                btn.attr("disabled", false).html(prevhtml);
            }
        });
    });

    $(document).on("click", ".drag-area", function () {
        $(this).find(".imageFileUpload")[0].click();
    });

    $(".drag-area").on('dragleave', function (e) {
        e.preventDefault();
        $(this).removeClass("dragging");
    });

    $(".drag-area").on('dragover', function (e) {
        e.preventDefault();
        $(this).addClass("dragging");
    });

    $(".drag-area").on('drop', function (e) {
        e.preventDefault();
        $(this).removeClass("dragging");
        let files = e.originalEvent.dataTransfer.files;
        if (typeof window?.afterDragFiles == 'function') {
            window.afterDragFiles(files);
        }
    });

    $(document).on("click", ".pasteText", function () {
        const validation = $(this).attr("data-validate");
        const target = $(this).attr("data-field");

        let inputEle = $(document).find(`.${target}`);
        if (inputEle) {
            navigator.clipboard.readText().then((clipText) => {
                if (validation == 'url') {
                    if (isValidURL(clipText)) {
                        inputEle.val(clipText);
                        alertMessage("success", "URL pasted successfully!!!");
                    } else {
                        alertMessage("error", "Copied text is not valid url!!!");
                    }
                } else {
                    inputEle.val(clipText);
                    alertMessage("success", "Text pasted successfully!!!");
                }
            });
        }
    });


    var $request;
    $(document).on("paste keydown keyup change", ".searchtools", function () {
        const report = $(this).closest(".tools_section");
        $request = $.ajax({
            type: "POST",
            url: allsmarttools.ajaxurl,
            data: {
                query: $(this).val(),
                action: "search_tool"
            },
            dataType: "json",
            beforeSend: function () {
                if ($request != null) {
                    $request.abort();
                    $request = null;
                }

                report.addClass("searching");
            },
            success: function (response) {
                if (response.success) {
                    report.find(".toolslist .tools").html(response.message);
                } else {
                    alertMessage("error", response.message);
                }
            },
            complete: function () {
                report.removeClass("searching");
            }
        });
    });

    if ($(document).find(".main_search_page .searchtools").length > 0) {
        $(document).find(".main_search_page .searchtools").trigger("keydown");
    }

    $(document).on("submit", ".contact_form_submit", function (e) {
        e.preventDefault();
        $.ajax({
            type: "POST",
            url: allsmarttools.ajaxurl,
            data: $(this).serializeArray(),
            dataType: "json",
            beforeSend: function () {
                show_loadingModal("Sending Message . . .");
            },
            success: function (response) {
                alertMessage(response.type, response.message);
            },
            error: function () {
                alertMessage("error", "Unable to send message!!!")
            },
            complete: function () {
                hide_loadingModal();
            }
        });
    });

    try {
        const tooltiptitle = $(document).find('[title]');
        if (tooltiptitle.length > 0) {
            tooltiptitle.tooltip({
                animation: true,
                html: true
            });
        }
    } catch (error) {

    }

    $(document).on("click", ".btn-icon.btn-search,.tkp__search", function(e){
        e.preventDefault();
        $(document).find(".searchtools").val("").trigger("change");
        $(document.body).addClass("tool-search-visible");
    });

    $(document).on("click", ".navbar-search-close", function(e){
        e.preventDefault();
        $(document.body).removeClass("tool-search-visible");
    });

    $(document).on("click", ".navbar-toggler", function(e){
        e.preventDefault();
        $(document.body).addClass("mobile-menu-visible");
    });

    $(document).on("click", ".tkp__menu-backdrop,.tkp__menu-box .close-btn", function(e){
        e.preventDefault();
        $(document.body).removeClass("mobile-menu-visible");
    });

    $(document).on("click", ".dropdown-btn,li.menu-item-has-children>a", function(e){
        e.preventDefault();
        $(this).closest("li").find(".sub-menu").slideToggle();
        $(this).toggleClass("open");
    });

    $(document).on("change", "[name=planChange]", function(){
        const value = $(this).val();
        if( value == 'monthly' ){
            $(document).find(".price-card .price.monthly").removeClass("d-none");
            $(document).find(".price-card .price.yearly").addClass("d-none");
        }else{
            $(document).find(".price-card .price.monthly").addClass("d-none");
            $(document).find(".price-card .price.yearly").removeClass("d-none");
        }
    });

    $(document).on("click", ".subscribePlan", function(){
        const btn = $(this);
        const plan = $(document).find("[name=planChange]").val();

        window.location.href = allsmarttools.siteurl + "payment/checkout/" + plan + "/" + btn.attr("data-plan") + "/";
    });
    
    $(document).on("change", "[name=gateway]", function(){
        $(document).trigger("payment_method_change");
    });

    $(document).on("payment_method_change", function(){
        $.ajax({
            type: "POST",
            url: allsmarttools.ajaxurl,
            data: $(document).find("form.checkout").serializeArray(),
            dataType: "json",
            beforeSend: function () {
                $(document).find(".checkoutloading").addClass("show");
            },
            success: function (response) {
                if( response.overview ){
                    $(document).find(".overviewcard").html(response.overview);
                    $(document).trigger("setup_overview_options");
                }

                if( response.payments ){
                    $(document).find(".paymentscard").html(response.payments);
                    $(document).trigger("setup_payment_options");
                }
            },
            error: function () {
                alertMessage("error", "Unable to load checkout!!!");
            },
            complete: function () {
                $(document).find(".checkoutloading").removeClass("show");
            }
        });
    });


    function tryToSetData(){
        try {
            if( typeof window.localStorage == 'object' ){
                const defaultValue = window.localStorage.getItem("setValue");
                if( defaultValue != null ){
                    const defaultValueObj = JSON.parse(defaultValue);
                    window.localStorage.clear();

                    const targetEle = $(document).find(defaultValueObj.target);
                    if( targetEle.length > 0 ){
                        targetEle.val(defaultValueObj.value).trigger("change");
                        if( defaultValueObj.hasOwnProperty("form") ){
                            const targetForm = $(document).find(defaultValueObj.form);
                            if( targetForm.length > 0 ){
                                targetForm.submit();
                            }
                        }else if( defaultValueObj.hasOwnProperty("btn") ){
                            const targetBtn = $(document).find(defaultValueObj.btn);
                            if( targetBtn.length > 0 ){
                                targetBtn.trigger("click");
                            }
                        }
                    }
                }
            }
        } catch (error) {
            
        }
    }

    window.addEventListener('load', function () {
        tryToSetData();
    });

    // console.log(document.readyState);
    // if (document.readyState != 'loading') {
    //     tryToSetData();
    // }else{
    //     document.addEventListener('DOMContentLoaded', function() {
    //         tryToSetData();
    //     });
    // }
});
